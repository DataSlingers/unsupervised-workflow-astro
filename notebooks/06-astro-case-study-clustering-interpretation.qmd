---
title: "Finding Common Origins of Milky Way Stars"
date: today
author: "Andersen Chang, Tiffany M. Tang, Tarek M. Zikry, Genevera I. Allen"
format: html
---

```{r setup}
#| include: false

rm(list = ls())

# source all functions from R/ folder
for (fname in list.files(here::here("R"), pattern = "*.R")) {
  source(here::here(file.path("R", fname)))
}

# helper paths
DATA_PATH <- here::here("data")
RESULTS_PATH <- here::here("results")
if (!file.exists(RESULTS_PATH)) {
  dir.create(RESULTS_PATH, recursive = TRUE)
}

# helpers for quarto plotting
subchunkify <- purrr::partial(subchunkify, prefix = "interpret")
subchunk_idx <- 1  # for subchunk numbering

# load in data
load(file.path(DATA_PATH, "astro_cleaned_data.RData"))
# load in dimension reduction results
dr_fit_ls <- readRDS(file.path(RESULTS_PATH, "dimension_reduction_fits.rds"))

set.seed(12345)

custom_colors <- c("black", "#d9d9d9", "white", "#fadbd5", "#BD7A65")
custom_color_values <- c(0, 0.3, 0.5, 0.7, 1)

NCORES <- as.integer(Sys.getenv("NCORES"))
if (is.na(NCORES)) {
  NCORES <- parallel::detectCores() - 1
}

best_clust_method_name <- "K-means"
best_k <- 8
best_pipe_name <- "k = 8: K-means"
```

## Fit Tuned Clustering Pipeline(s) on Full Data

```{r}
#| code-summary: "Show Code to Fit Final (tuned) Clustering Pipeline on Full Data"

## this code chunk fits the final (tuned) clustering pipeline on the full data

#### choose imputation methods ####
data_ls <- list(
  "Mean-imputed" = rbind(data_mean_imputed$train, data_mean_imputed$test),
  "RF-imputed" = rbind(data_rf_imputed$train, data_rf_imputed$test)
)

#### choose number of features ####
feature_modes <- list(
  "Small" = 7,
  "Medium" = 11,
  "Big" = 19
)

#### choose dimension reduction methods ####
# raw data
identity_fun_ls <- list("Raw" = function(x) x)

# pca
pca_fun_ls <- list("PCA" = purrr::partial(fit_pca, ndim = 4))

# tsne
tsne_perplexities <- c(30, 100)
tsne_fun_ls <- purrr::map(
  tsne_perplexities,
  ~ purrr::partial(fit_tsne, dims = 2, perplexity = .x)
) |> 
  setNames(sprintf("tSNE (perplexity = %d)", tsne_perplexities))

# putting it together
dr_fun_ls <- c(
  identity_fun_ls,
  pca_fun_ls,
  tsne_fun_ls
)

#### choose clustering methods ####
# kmeans
kmeans_fun_ls <- list("K-means" = purrr::partial(fit_kmeans, ks = ks))

# spectral clustering
n_neighbors <- c(60, 100)
spectral_fun_ls <- purrr::map(
  n_neighbors,
  ~ purrr::partial(
    fit_spectral_clustering, 
    ks = ks,
    affinity = "nearest_neighbors",
    n_neighbors = .x
  )
) |> 
  setNames(sprintf("Spectral (n_neighbors = %s)", n_neighbors))

# putting it together
clust_fun_ls <- c(
  kmeans_fun_ls,
  spectral_fun_ls
)

#### Fit Clustering Pipelines ####
pipe_tib <- tidyr::expand_grid(
  data = data_ls,
  feature_mode = feature_modes,
  dr_method = dr_fun_ls,
  clust_method = clust_fun_ls
) |> 
  dplyr::mutate(
    impute_mode_name = names(data),
    feature_mode_name = names(feature_mode),
    dr_method_name = names(dr_method),
    clust_method_name = names(clust_method),
    name = stringr::str_glue(
      "{clust_method_name} [{impute_mode_name} + {feature_mode_name} + {dr_method_name}]"
    )
  ) |> 
  # remove some clustering pipelines to reduce computation burden
  dplyr::filter(
    # remove all big feature set + dimension-reduction runs
    !((dr_method_name != "Raw") & (feature_mode_name == "Big")),
    # restrict to tuned models
    clust_method_name == !!best_clust_method_name
  )
pipe_ls <- split(pipe_tib, seq_len(nrow(pipe_tib))) |> 
  setNames(pipe_tib$name)

fit_results_fname <- file.path(RESULTS_PATH, "clustering_fits_final.rds")
consensus_clusters_results_path <- file.path(
  RESULTS_PATH, "consensus_clusters_final.rds"
)
consensus_nbhd_results_path <- file.path(
  RESULTS_PATH, "consensus_neighborhood_matrices_final.rds"
)
if (!file.exists(fit_results_fname) ||
    !file.exists(consensus_clusters_results_path) ||
    !file.exists(consensus_nbhd_results_path)) {
  library(future)
  plan(multisession, workers = NCORES)
  
  # fit clustering pipelines (if not already cached)
  clust_fit_ls <- furrr::future_map(
    pipe_ls,
    function(pipe_df) {
      g <- create_preprocessing_pipeline(
        feature_mode = pipe_df$feature_mode[[1]],
        preprocess_fun = pipe_df$dr_method[[1]]
      )
      clust_out <- pipe_df$clust_method[[1]](
        data = pipe_df$data[[1]], preprocess_fun = g
      )
      return(clust_out)
    },
    .options = furrr::furrr_options(
      seed = TRUE, 
      globals = list(
        ks = best_k,
        create_preprocessing_pipeline = create_preprocessing_pipeline,
        get_abundance_data = get_abundance_data,
        tsne_perplexities = tsne_perplexities,
        n_neighbors = n_neighbors,
        fit_kmeans = fit_kmeans,
        fit_spectral_clustering = fit_spectral_clustering
      )
    )
  )
  # save fitted clustering pipelines
  saveRDS(clust_fit_ls, file = fit_results_fname)
  
  # estimate consensus clusters
  clust_fit_ls <- purrr::map(clust_fit_ls, ~ .x$cluster_ids) |> 
    purrr::list_flatten(name_spec = "{inner}: {outer}")
  nbhd_mat <- get_consensus_neighborhood_matrix(clust_fit_ls)
  consensus_out <- fit_consensus_clusters(nbhd_mat, k = best_k)
  saveRDS(consensus_out, file = consensus_clusters_results_path)
  saveRDS(nbhd_mat, file = consensus_nbhd_results_path)
} else {
  # read in results (if already cached)
  clust_fit_ls <- readRDS(fit_results_fname)
  consensus_out <- readRDS(consensus_clusters_results_path)
  nbhd_mat <- readRDS(consensus_nbhd_results_path)
}
```

## Interpreting the Final Clusters

:::{.panel-tabset}

```{r}
#| output: asis
#| echo: false

keep_dr_methods <- c("PCA", "tSNE (perplexity = 30)", "tSNE (perplexity = 100)")
keep_dr_feature_modes <- c("small", "medium")
dr_plt_df <- dr_fit_ls[keep_dr_feature_modes] |> 
  purrr::map(~ .x[keep_dr_methods]) |> 
  purrr::list_flatten(name_spec = "{inner} [{outer}]") |>
  purrr::map(
    ~ .x$scores[, 1:2] |> 
      setNames(paste0("Component ", 1:2)) |> 
      dplyr::mutate(
        id = 1:dplyr::n()
      )
  ) |> 
  dplyr::bind_rows(.id = "method") |> 
  dplyr::mutate(
    method = forcats::fct_inorder(method)
  )

cat(sprintf("\n\n### %s\n\n", best_pipe_name))
cat("\n\n:::{.panel-tabset .nav-pills}\n\n")
consensus_cluster_ids <- consensus_out$cluster_ids

cat("\n\n#### Overview\n\n")
cat("\n\n##### Consensus Neighborhood Heatmap\n\n")
consensus_plt <- plot_consensus_clusters(
  nbhd_mat,
  leaf_colors = as.factor(consensus_cluster_ids),
  custom_colors = custom_colors,
  custom_color_values = custom_color_values
)
subchunkify(
  consensus_plt, fig_width = 12, fig_height = 10,
  caption = "'Consensus neighborhood heatmap of the final clustering pipeline.'"
)

cat("\n\n##### GCs per Cluster\n\n")
bar_plt <- plot_gcs_per_cluster(
  cluster_ids = consensus_cluster_ids,
  gcs = c(metadata$train$GC_NAME, metadata$test$GC_NAME)
)
subchunkify(
  plotly::ggplotly(bar_plt),
  caption = "'GC composition for each estimated consensus cluster.'"
)

cat("\n\n#### Local Stability\n\n")
cat("\n\n##### On Galactic Coordinates\n\n")
local_stability <- eval_local_stability(
  nbhd_mat, consensus_cluster_ids
)
local_stability_plt <- plot_local_stability_on_galactic(
  local_stability = local_stability,
  cluster_ids = consensus_cluster_ids,
  metadata = rbind(metadata$train, metadata$test)
)
subchunkify(
  local_stability_plt,
  # plotly::ggplotly(local_stability_plt), 
  fig_width = 10, fig_height = 6,
  caption = "'Galactic coordinates of stars, colored by its local cluster stability.'"
)

cat("\n\n##### On Dimension Reduction\n\n")
dr_plt <- plot_local_stability_on_dr(
  local_stability = local_stability,
  cluster_ids = consensus_cluster_ids,
  metadata = rbind(metadata$train, metadata$test),
  dr_data = dr_plt_df
)
subchunkify(
  dr_plt,
  # plotly::ggplotly(dr_plt), 
  fig_width = 12, fig_height = 6,
  caption = "'Dimension reduction visualizations of stars, colored by its local cluster stability.'"
)

cat("\n\n#### Abundance per Cluster\n\n")
abundance_plt <- dplyr::bind_cols(
  cluster_id = as.factor(consensus_cluster_ids),
  rbind(data_mean_imputed$train, data_mean_imputed$test)
) |> 
  tidyr::pivot_longer(
    cols = -cluster_id,
    names_to = "Feature",
    values_to = "Abundance"
  ) |> 
  ggplot2::ggplot() +
  ggplot2::aes(x = Abundance, fill = cluster_id) +
  ggplot2::facet_wrap(~ Feature, scales = "free") +
  ggplot2::geom_density(alpha = 0.5) +
  ggplot2::labs(y = "Density", fill = "Cluster ID") +
  vthemes::theme_vmodern()
subchunkify(
  plotly::ggplotly(abundance_plt),
  fig_width = 12, fig_height = 10,
  caption = "'Abundance of features per estimated consensus cluster.'"
)

cat("\n\n:::\n\n")
```

:::
